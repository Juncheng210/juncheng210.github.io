<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>俊成的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://juncheng210.github.com/"/>
  <updated>2019-06-29T17:35:22.324Z</updated>
  <id>https://juncheng210.github.com/</id>
  
  <author>
    <name>Juncheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git常用命令速查表</title>
    <link href="https://juncheng210.github.com/2019-06-30/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>https://juncheng210.github.com/2019-06-30/Git常用命令速查表/</id>
    <published>2019-06-30T05:58:51.000Z</published>
    <updated>2019-06-29T17:35:22.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h1><p>根据官方文档和网络资源整理</p><p><strong>名词</strong>    </p><ul><li>master: 默认开发分支</li><li>origin: 默认远程版本库</li><li>Index / Stage：暂存区</li><li>Workspace：工作区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库<a id="more"></a></li></ul><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. # 在当前目录新建一个Git代码库</span><br><span class="line">2. $ git init</span><br><span class="line">3. # 新建一个目录，将其初始化为Git代码库</span><br><span class="line">4. $ git init [project-name]</span><br><span class="line">5. # 下载一个项目和它的整个代码历史</span><br><span class="line">6. $ git clone [url]</span><br></pre></td></tr></table></figure><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. # 显示当前的Git配置</span><br><span class="line">2. $ git config --list</span><br><span class="line">3. # 编辑Git配置文件</span><br><span class="line">4. $ git config -e [--global]</span><br><span class="line">5. # 设置提交代码时的用户信息</span><br><span class="line">6. $ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">7. $ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h2 id="三、增加-删除-修改文件"><a href="#三、增加-删除-修改文件" class="headerlink" title="三、增加/删除/修改文件"></a>三、增加/删除/修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. #查看状态</span><br><span class="line">2. $ git status</span><br><span class="line">3. #查看变更内容</span><br><span class="line">4. $ git diff</span><br><span class="line">5. # 添加指定文件到暂存区</span><br><span class="line">6. $ git add [file1] [file2] ...</span><br><span class="line">7. # 添加指定目录到暂存区，包括子目录</span><br><span class="line">8. $ git add [dir]</span><br><span class="line">9. # 添加当前目录的所有文件到暂存区</span><br><span class="line">10. $ git add .</span><br><span class="line">11. # 添加每个变化前，都会要求确认</span><br><span class="line">12. # 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">13. $ git add -p</span><br><span class="line">14. # 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">15. $ git rm [file1] [file2] ...</span><br><span class="line">16. # 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">17. $ git rm --cached [file]</span><br><span class="line">18. # 改名文件，并且将这个改名放入暂存区</span><br><span class="line">19. $ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. # 提交暂存区到仓库区</span><br><span class="line">2. $ git commit -m [message]</span><br><span class="line">3. # 提交暂存区的指定文件到仓库区</span><br><span class="line">4. $ git commit [file1] [file2] ... -m [message]</span><br><span class="line">5. # 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">6. $ git commit -a</span><br><span class="line">7. # 提交时显示所有diff信息</span><br><span class="line">8. $ git commit -v</span><br><span class="line">9. # 使用一次新的commit，替代上一次提交</span><br><span class="line">10. # 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">11. $ git commit --amend -m [message]</span><br><span class="line">12. # 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">13. $ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. #显示所有本地分支</span><br><span class="line">2. $ git branch</span><br><span class="line">3. # 列出所有远程分支</span><br><span class="line">4. $ git branch -r</span><br><span class="line">5. # 列出所有本地分支和远程分支</span><br><span class="line">6. $ git branch -a</span><br><span class="line">7. # 新建一个分支，但依然停留在当前分支</span><br><span class="line">8. $ git branch [branch-name]</span><br><span class="line">9. # 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">10. $ git branch --track [branch] [remote-branch]</span><br><span class="line">11. # 删除分支</span><br><span class="line">12. $ git branch -d [branch-name]</span><br><span class="line">13. # 删除远程分支</span><br><span class="line">14. $ git push origin --delete [branch-name]</span><br><span class="line">15. $ git branch -dr [remote/branch]</span><br><span class="line">16. # 新建一个分支，并切换到该分支</span><br><span class="line">17. $ git checkout -b [branch]</span><br><span class="line">18. # 切换到指定分支，并更新工作区</span><br><span class="line">19. $ git checkout [branch-name]</span><br><span class="line">20. # 切换到上一个分支</span><br><span class="line">21. $ git checkout -</span><br><span class="line">22. # 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">23. $ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line">24. # 合并指定分支到当前分支</span><br><span class="line">25. $ git merge [branch]</span><br><span class="line">26. #衍合指定分支到当前分支</span><br><span class="line">27. $ git rebase &lt;branch&gt;</span><br><span class="line">28. # 选择一个commit，合并进当前分支</span><br><span class="line">29. $ git cherry-pick [commit]</span><br></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. $ git tag #列出所有本地标签</span><br><span class="line">2. $ git tag &lt;tagname&gt; #基于最新提交创建标签</span><br><span class="line">3. $ git tag -d &lt;tagname&gt; #删除标签</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. # 删除远程tag</span><br><span class="line">2. $ git push origin :refs/tags/[tagName]</span><br><span class="line">3. # 查看tag信息</span><br><span class="line">4. $ git show [tag]</span><br><span class="line">5. # 提交指定tag</span><br><span class="line">6. $ git push [remote] [tag]</span><br><span class="line">7. # 提交所有tag</span><br><span class="line">8. $ git push [remote] --tags</span><br><span class="line">9. # 新建一个分支，指向某个tag</span><br><span class="line">10. $ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1. # 显示有变更的文件</span><br><span class="line">2. $ git status</span><br><span class="line">3. # 显示当前分支的版本历史</span><br><span class="line">4. $ git log</span><br><span class="line">5. # 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">6. $ git log --stat</span><br><span class="line">7. # 搜索提交历史，根据关键词</span><br><span class="line">8. $ git log -S [keyword]</span><br><span class="line">9. # 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">10. $ git log [tag] HEAD --pretty=format:%s</span><br><span class="line">11. # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">12. $ git log [tag] HEAD --grep feature</span><br><span class="line">13. # 显示某个文件的版本历史，包括文件改名</span><br><span class="line">14. $ git log --follow [file]</span><br><span class="line">15. $ git whatchanged [file]</span><br><span class="line">16. # 显示指定文件相关的每一次diff</span><br><span class="line">17. $ git log -p [file]</span><br><span class="line">18. # 显示过去5次提交</span><br><span class="line">19. $ git log -5 --pretty --oneline</span><br><span class="line">20. # 显示所有提交过的用户，按提交次数排序</span><br><span class="line">21. $ git shortlog -sn</span><br><span class="line">22. # 显示指定文件是什么人在什么时间修改过</span><br><span class="line">23. $ git blame [file]</span><br><span class="line">24. # 显示暂存区和工作区的差异</span><br><span class="line">25. $ git diff</span><br><span class="line">26. # 显示暂存区和上一个commit的差异</span><br><span class="line">27. $ git diff --cached [file]</span><br><span class="line">28. # 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">29. $ git diff HEAD</span><br><span class="line">30. # 显示两次提交之间的差异</span><br><span class="line">31. $ git diff [first-branch]...[second-branch]</span><br><span class="line">32. # 显示今天你写了多少行代码</span><br><span class="line">33. $ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line">34. # 显示某次提交的元数据和内容变化</span><br><span class="line">35. $ git show [commit]</span><br><span class="line">36. # 显示某次提交发生变化的文件</span><br><span class="line">37. $ git show --name-only [commit]</span><br><span class="line">38. # 显示某次提交时，某个文件的内容</span><br><span class="line">39. $ git show [commit]:[filename]</span><br><span class="line">40. # 显示当前分支的最近几次提交</span><br><span class="line">41. $ git reflog</span><br></pre></td></tr></table></figure><h2 id="八、远程操作"><a href="#八、远程操作" class="headerlink" title="八、远程操作"></a>八、远程操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">2. # 下载远程仓库的所有变动</span><br><span class="line">3. $ git fetch [remote]</span><br><span class="line">4. # 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">5. $ git pull [remote] [branch]</span><br><span class="line">6. # 显示所有远程仓库</span><br><span class="line">7. $ git remote -v</span><br><span class="line">8. # 显示某个远程仓库的信息</span><br><span class="line">9. $ git remote show [remote]</span><br><span class="line">10. # 增加一个新的远程仓库，并命名</span><br><span class="line">11. $ git remote add [shortname] [url]</span><br><span class="line">12. # 上传本地指定分支到远程仓库</span><br><span class="line">13. $ git push [remote] [branch]</span><br><span class="line">14. # 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">15. $ git push [remote] --force</span><br><span class="line">16. # 推送所有分支到远程仓库</span><br><span class="line">17. $ git push [remote] --all</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. $ git push &lt;remote&gt; :&lt;branch/tag-name&gt; #删除远程分支或标签</span><br><span class="line">2. $ git push --tags #上传所有标签</span><br></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. $ git reset --hard HEAD #撤销工作目录中所有未提交文件的修改内容</span><br><span class="line">2. $ git checkout HEAD &lt;file&gt; #撤销指定的未提交文件的修改内容</span><br><span class="line">3. $ git revert &lt;commit&gt; #撤销指定的提交</span><br><span class="line">4. $ git log --before=&quot;1 days&quot; #退回到之前1天的版本</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. # 恢复暂存区的指定文件到工作区</span><br><span class="line">2. $ git checkout [file]</span><br><span class="line">3. # 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">4. $ git checkout [commit] [file]</span><br><span class="line">5. # 恢复暂存区的所有文件到工作区</span><br><span class="line">6. $ git checkout .</span><br><span class="line">7. # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">8. $ git reset [file]</span><br><span class="line">9. # 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">10. $ git reset --hard</span><br><span class="line">11. # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">12. $ git reset [commit]</span><br><span class="line">13. # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">14. $ git reset --hard [commit]</span><br><span class="line">14. $ git reset hard [commit]</span><br><span class="line">15. # 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">16. $ git reset --keep [commit]</span><br><span class="line">17. # 新建一个commit，用来撤销指定commit</span><br><span class="line">18. # 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">19. $ git revert [commit]</span><br><span class="line">20. # 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">21. $ git stash</span><br><span class="line">22. $ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><p>生成一个可供发布的压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git常用命令速查表&quot;&gt;&lt;a href=&quot;#Git常用命令速查表&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令速查表&quot;&gt;&lt;/a&gt;Git常用命令速查表&lt;/h1&gt;&lt;p&gt;根据官方文档和网络资源整理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;名词&lt;/strong&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: 默认开发分支&lt;/li&gt;
&lt;li&gt;origin: 默认远程版本库&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库
    
    </summary>
    
    
      <category term="Git" scheme="https://juncheng210.github.com/tags/Git/"/>
    
  </entry>
  
</feed>
